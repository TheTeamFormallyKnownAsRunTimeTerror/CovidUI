@page "/safety"
@using System.Threading
@using CovidUI.Responses
@using Syncfusion.Blazor.Charts
@inject NavigationManager NavigationManager
@inject HttpClient Http

<SfAccumulationChart Title="Measures Impact" EnableSmartLabels="true">
    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
    <AccumulationChartSeriesCollection>
        <AccumulationChartSeries DataSource="@ListOfMeasures" XName="MeasureName" YName="MeasureImpact">
            <AccumulationDataLabelSettings Visible="true" Name="MeasureName" Position="AccumulationLabelPosition.Outside"></AccumulationDataLabelSettings>
        </AccumulationChartSeries>
    </AccumulationChartSeriesCollection>
</SfAccumulationChart>


@code{

    public CountrySafetyMeasures CountrySafetyMeasures;
    public List<CountrySafetyMeasures> ListOfCountrySafetyMeasures;
    public List<Measures> ListOfMeasures;

    protected override async Task OnInitializedAsync()
    {
        CountrySafetyMeasures = new CountrySafetyMeasures();
        ListOfMeasures = new List<Measures>();
        await GetCountrySafetyData("GB");
        //CreateDefaultChartData();
        Thread.Sleep(5000);
    }

    private async Task GetCountrySafetyData(string countryCode)
    {
        var countryInfoUrl = $"http://localhost:8080/api/Country/stats/{countryCode}";
        var response = await Http.GetAsync(countryInfoUrl);
        var responseContent = await response.Content.ReadAsStringAsync();

        CountrySafetyMeasures = System.Text.Json.JsonSerializer.Deserialize<CountrySafetyMeasures>(responseContent);

        ConvertMeasures(CountrySafetyMeasures);
    }

    private void ConvertMeasures(CountrySafetyMeasures countryData)
    {
        var measures = new Dictionary<string, decimal>();
        measures = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, decimal>>(CountrySafetyMeasures.MeasureImportances);

        foreach (var measure in measures)
        {
            ListOfMeasures.Add(new Measures
            {
                MeasureName = measure.Key,
                MeasureImpact = measure.Value
            });

            Console.WriteLine($"{measure.Key}");
            Console.WriteLine($"{measure.Value}");
        }
    }


    public class Measures
    {
        public string MeasureName { get; set; }
        public decimal MeasureImpact { get; set; }
    }

}