@page "/Query"
@inject HttpClient Http
@using System.Reflection
@using System.Security.Cryptography.X509Certificates
@using CovidUI.Responses
@using Syncfusion.Blazor.QueryBuilder;
@using Microsoft.Extensions.Logging

<h3>QueryBuilder</h3>
<SfButton CssClass="e-primary" @onclick=AddRules>Add Rules</SfButton>
<SfQueryBuilder DataSource="@ListOfCountryInfo" @ref="QueryBuilderObj">
    <QueryBuilderColumns>
        <QueryBuilderColumn Field="CountryName" Label="Country Name" Type="string"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Population" Label="Population" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="PopulationDensity" Label="Population Density" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="MedianAge" Label="Median Age" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Aged65Older" Label="Aged 65 Or Older" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Aged70Older" Label="Aged 70 Or Older" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="GdpPerCapita" Label="Gdp Per Capita" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="DiabetesPrevalence" Label="Diabetes Prevalence" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="HandwashingFacilities" Label="Handwashing Facilities" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="HospitalBedsPerThousand" Label="Hospital Beds Per Thousand" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="LifeExpectancy" Label="Life Expectancy" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="ActiveCases" Label="Active Cases" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="ConfirmedCases" Label="Confirmed Cases" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Deaths" Label="Deaths" Type="number"></QueryBuilderColumn>
        <QueryBuilderColumn Field="Recovered" Label="Recovered" Type="number"></QueryBuilderColumn>
    </QueryBuilderColumns>
</SfQueryBuilder>
<SfButton CssClass="e-primary" @onclick=GetCountryStaticInformation>Get Data! </SfButton>
<SfButton CssClass="e-primary" @onclick=GetCountryStaticInformation>Get Data From Rules! </SfButton>


@code {
    SfQueryBuilder QueryBuilderObj;
    List<StaticCountryInformation> ListOfCountryInfo;


    private async Task GetCountryStaticInformation()
    {
        var countryInfoUrl = "http://34.254.161.81:5000/api/Country/base";
        var response = await Http.GetAsync(countryInfoUrl);
        var responseContent = await response.Content.ReadAsStringAsync();

        ListOfCountryInfo = System.Text.Json.JsonSerializer.Deserialize<List<StaticCountryInformation>>(responseContent);
        QueryBuilderObj.DataSource = ListOfCountryInfo;
        Console.WriteLine($"{ListOfCountryInfo.Count} Countries with Data");


        GetRules();
        //foreach (var result in value.Rules)
        //{
        //    Console.WriteLine($"Rule Count: {result.Rules.Count}");
        //    Console.WriteLine($"Condition: {result.Condition}");
        //    Console.WriteLine($"Field: {result.Field}");
        //    Console.WriteLine($"Operator: {result.Operator}");
        //    Console.WriteLine($"Type: {result.Type}");
        //    Console.WriteLine($"Value: {result.Value}");

        //}
    }

    private void AddRules()
    {
        QueryBuilderObj.SetRules(defaultRules);
    }

    private async void GetRules()
    {
        RuleModel rule = await QueryBuilderObj.GetRules();
        RuleModel validRules = await QueryBuilderObj.GetValidRules(rule);

        var sql = await QueryBuilderObj.GetSqlFromRules(validRules);

        //GetQueryResult(validRules);

    }

    //private void GetQueryResult(RuleModel validRules)
    //{
    //    var queryCondition = validRules.Condition;
    //    var listOfCustomerRules = new List<CustomRuleModel>();

    //    foreach (var ruleModel in validRules.Rules)
    //    {
    //        var customerRuleModel = new CustomRuleModel
    //        {
    //            FieldToSearch = ruleModel.Field,
    //            ValueToSearch = ruleModel.Value,
    //            OperatorToUse = ruleModel.Operator
    //        };

    //        listOfCustomerRules.Add(customerRuleModel);

    //        var result = GetQueryResult2(customerRuleModel.FieldToSearch, customerRuleModel.ValueToSearch.ToString());

    //        Type myType = typeof(CustomRuleModel);

    //        PropertyInfo myPropInfo = myType.GetProperty(customerRuleModel.FieldToSearch);
    //    }
    //}

    public IEnumerable<StaticCountryInformation> GetQueryResult2(string searchField, string searchValue) {
        PropertyInfo getter=typeof(StaticCountryInformation).GetProperty(searchField);
        if(getter==null) {
            throw new ArgumentOutOfRangeException("searchField");
        }
        var result =  ListOfCountryInfo.Where(x => getter.GetValue(x, null).ToString()== searchValue);

        return result;
    }

    private class CustomRuleModel
    {
        public string FieldToSearch { get; set; }
        public Object ValueToSearch { get; set; }
        public string OperatorToUse { get; set; }
    };

    RuleModel defaultRules = new RuleModel
    {
        Condition = "or",
        Rules = new List<RuleModel>
{
            new RuleModel{Field = "CountryName", Operator = "equal", Value = "Ireland"},
            new RuleModel{Field = "Population", Operator = "greaterthan", Value = "1000000"}
        }
    };

}
